{"remainingRequest":"D:\\hw9\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\hw9\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\hw9\\src\\App.vue","mtime":1549049779606},{"path":"D:\\hw9\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\hw9\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\hw9\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\hw9\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Header from './components/Header';\nimport Middle from './components/Middle';\nimport Footer from './components/Footer';\n\nexport default {\n    name: 'app',\n    components: {\n        Header,\n        Middle,\n        Footer\n    },\n    data: function () {\n        return this.$root.$data;\n    }, beforeCreate() {\n        this.$root.$on('onLogout', () => {\n            this.userId = null;\n        });\n        this.$root.$on('onEnter', (login) => {\n            let users = Object.values(this.users).filter(u => u.login === login);\n            if (users.length) {\n                this.userId = users[0].id;\n                this.$root.$emit('onEnterSuccess');\n            } else {\n                this.$root.$emit('onEnterValidationError', 'Invalid login/password.');\n            }\n        });\n        this.$root.$on('onAddPost', (title, text) => {\n            if (this.userId) {\n                if (!title || title.length > 5) {\n                    this.$root.$emit('onAddPostValidationError', 'Title is invalid');\n                } else if (!text || text.length > 10) {\n                    this.$root.$emit('onAddPostValidationError', 'Text is invalid');\n                } else {\n                    const id = Math.max(...Object.keys(this.posts)) + 1;\n                    this.$set(this.posts, id, {\n                        id,\n                        userId: this.userId,\n                        title,\n                        text\n                    });\n                }\n            } else {\n                this.$root.$emit('onAddPostValidationError', 'No access');\n            }\n        });\n        this.$root.$on('onEditPost', (id, text) => {\n            if (this.userId) {\n                if (!id) {\n                    this.$root.$emit('onEditPostValidationError', 'ID is invalid');\n                } else if (!text || text.length > 10) {\n                    this.$root.$emit('onEditPostValidationError', 'Text is invalid');\n                } else {\n                    let posts = Object.values(this.posts).filter(p => p.id === parseInt(id));\n                    if (posts.length) {\n                        posts.forEach((item) => {\n                            item.text = text;\n                        });\n                    } else {\n                        this.$root.$emit('onEditPostValidationError', 'No such post');\n                    }\n                }\n            } else {\n                this.$root.$emit('onEditPostValidationError', 'No access');\n            }\n        });\n        this.$root.$on('onRegister', (login, name) => {\n            if (login.length < 3) {\n                this.$root.$emit('onRegisterValidationError', 'Login is so short');\n            } else if (login.length > 16) {\n                this.$root.$emit('onRegisterValidationError', 'Login is so big');\n            } else if (Object.values(this.users).filter(u => u.login === login).length > 0) {\n                this.$root.$emit('onRegisterValidationError', 'Login must be unique');\n            } else if (name.length < 1 || name.length > 32) {\n                this.$root.$emit('onRegisterValidationError', 'Name is incorrect');\n            } else {\n                const id = Math.max(...Object.keys(this.users)) + 1;\n                this.$set(this.users, id, {\n                    id,\n                    login,\n                    name,\n                    admin: false\n                });\n            }\n        });\n    }\n};\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n    <!--suppress HtmlUnknownTag -->\n    <body id=\"app\">\n    <Header :userId=\"userId\"\n            :users=\"users\"/>\n    <Middle :posts=\"posts\"\n            :users=\"users\"/>\n    <Footer/>\n    </body>\n</template>\n\n<script>\n    import Header from './components/Header';\n    import Middle from './components/Middle';\n    import Footer from './components/Footer';\n\n    export default {\n        name: 'app',\n        components: {\n            Header,\n            Middle,\n            Footer\n        },\n        data: function () {\n            return this.$root.$data;\n        }, beforeCreate() {\n            this.$root.$on('onLogout', () => {\n                this.userId = null;\n            });\n            this.$root.$on('onEnter', (login) => {\n                let users = Object.values(this.users).filter(u => u.login === login);\n                if (users.length) {\n                    this.userId = users[0].id;\n                    this.$root.$emit('onEnterSuccess');\n                } else {\n                    this.$root.$emit('onEnterValidationError', 'Invalid login/password.');\n                }\n            });\n            this.$root.$on('onAddPost', (title, text) => {\n                if (this.userId) {\n                    if (!title || title.length > 5) {\n                        this.$root.$emit('onAddPostValidationError', 'Title is invalid');\n                    } else if (!text || text.length > 10) {\n                        this.$root.$emit('onAddPostValidationError', 'Text is invalid');\n                    } else {\n                        const id = Math.max(...Object.keys(this.posts)) + 1;\n                        this.$set(this.posts, id, {\n                            id,\n                            userId: this.userId,\n                            title,\n                            text\n                        });\n                    }\n                } else {\n                    this.$root.$emit('onAddPostValidationError', 'No access');\n                }\n            });\n            this.$root.$on('onEditPost', (id, text) => {\n                if (this.userId) {\n                    if (!id) {\n                        this.$root.$emit('onEditPostValidationError', 'ID is invalid');\n                    } else if (!text || text.length > 10) {\n                        this.$root.$emit('onEditPostValidationError', 'Text is invalid');\n                    } else {\n                        let posts = Object.values(this.posts).filter(p => p.id === parseInt(id));\n                        if (posts.length) {\n                            posts.forEach((item) => {\n                                item.text = text;\n                            });\n                        } else {\n                            this.$root.$emit('onEditPostValidationError', 'No such post');\n                        }\n                    }\n                } else {\n                    this.$root.$emit('onEditPostValidationError', 'No access');\n                }\n            });\n            this.$root.$on('onRegister', (login, name) => {\n                if (login.length < 3) {\n                    this.$root.$emit('onRegisterValidationError', 'Login is so short');\n                } else if (login.length > 16) {\n                    this.$root.$emit('onRegisterValidationError', 'Login is so big');\n                } else if (Object.values(this.users).filter(u => u.login === login).length > 0) {\n                    this.$root.$emit('onRegisterValidationError', 'Login must be unique');\n                } else if (name.length < 1 || name.length > 32) {\n                    this.$root.$emit('onRegisterValidationError', 'Name is incorrect');\n                } else {\n                    const id = Math.max(...Object.keys(this.users)) + 1;\n                    this.$set(this.users, id, {\n                        id,\n                        login,\n                        name,\n                        admin: false\n                    });\n                }\n            });\n        }\n    };\n</script>\n\n<style>\n</style>\n"]}]}